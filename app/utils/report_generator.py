from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.charts.textlabels import Label
from io import BytesIO
from datetime import datetime

def format_value(val):
    if val is None:
        return "N/A"
    if isinstance(val, float):
        return f"{val:.2f}"
    return str(val)

def generate_pdf_report(pilot_id: str, stats: dict):
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    margin = 50
    y = height - margin

    # === Header === #
    pdf.setFont("Helvetica-Bold", 16)
    pdf.drawString(margin, y, f"âœˆ Pilot Performance Report")
    y -= 25
    pdf.setFont("Helvetica", 10)
    pdf.drawString(margin, y, f"Pilot ID: {pilot_id}")
    y -= 15
    pdf.drawString(margin, y, f"Generated on: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    y -= 30

    def draw_section(title, data_dict):
        nonlocal y
        if y < 100:
            pdf.showPage()
            y = height - margin

        pdf.setFont("Helvetica-Bold", 13)
        pdf.drawString(margin, y, f"{title}")
        y -= 20

        pdf.setFont("Helvetica", 10)

        for key, value in data_dict.items():
            if isinstance(value, dict):
                pdf.setFont("Helvetica-Bold", 10)
                pdf.drawString(margin + 10, y, f"{key}:")
                y -= 15
                pdf.setFont("Helvetica", 10)
                for subkey, subval in value.items():
                    text = f"- {subkey}: {format_value(subval)}"
                    pdf.drawString(margin + 25, y, text)
                    y -= 12
            else:
                line = f"{key}: {format_value(value)}"
                pdf.drawString(margin + 10, y, line)
                y -= 15
        y -= 15

    # === Sections === #
    draw_section("ðŸ“Š System Metrics", stats.get("system_metrics", {}))
    draw_section("ðŸ§  Pilot Interaction Metrics", stats.get("pilot_metrics", {}))

    # === Visual Chart for System Events === #
    event_data = stats.get("system_metrics", {}).get("system_event_distribution", {})
    if event_data:
        labels = list(event_data.keys())
        values = list(event_data.values())

        drawing = Drawing(400, 200)
        chart = VerticalBarChart()
        chart.x = 50
        chart.y = 30
        chart.height = 120
        chart.width = 300
        chart.data = [values]
        chart.strokeColor = colors.black

        chart.valueAxis.valueMin = 0
        chart.valueAxis.valueMax = max(values) + 2
        chart.valueAxis.valueStep = max(1, int(max(values) / 5))

        chart.categoryAxis.labels.boxAnchor = 'ne'
        chart.categoryAxis.labels.angle = 45
        chart.categoryAxis.categoryNames = labels

        drawing.add(chart)
        pdf.showPage()
        drawing.drawOn(pdf, margin, height / 2)

    # === Footer === #
    pdf.setFont("Helvetica-Oblique", 8)
    pdf.drawString(margin, 30, "Generated by CPDLC UX Analytics Engine")

    pdf.showPage()
    pdf.save()
    buffer.seek(0)
    return buffer
